service: () -> {
    bookAppointment: (record {
        clientId: text;
        time: text;
        serviceId: text;
        professionalId: text;
    }) -> (variant {
        Ok: record {
            appointmentId: text;
            created_at: nat64;
            serviceId: text;
            clientId: text;
            clientName: text;
            clientPhoneNo: text;
            serviceName: text;
            professionalId: text;
            professionalName: text;
            time: text;
            status: variant { Pending: null; Completed: null; Cancelled: null };
        };
        Err: variant {
            InvalidPayload: text;
            NotFound: text;
        };
    });

    createClient: (record {
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) -> (variant {
        Ok: record {
            id: text;
            principal: principal;
            appointments: vec text;
            name: text;
            email: text;
            address: text;
            phoneNo: text;
        };
        Err: variant {
            InvalidPayload: text;
            NotFound: text;
        };
    });

    createProfessional: (record {
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) -> (variant {
        Ok: record {
            id: text;
            principal: principal;
            appointments: vec text;
            name: text;
            email: text;
            address: text;
            phoneNo: text;
        };
        Err: variant {
            InvalidPayload: text;
            NotFound: text;
        };
    });

    createService: (record {
        name: text;
        description: text;
        price: text;
    }) -> (variant {
        Ok: record {
            id: text;
            name: text;
            description: text;
            price: text;
        };
        Err: variant {
            InvalidPayload: text;
            NotFound: text;
        };
    });

    deleteService: (text) -> (variant {
        Ok: text;
        Err: variant {
            NotFound: text;
        };
    });

    getAppointment: (text) -> (opt record {
        appointmentId: text;
        created_at: nat64;
        serviceId: text;
        clientId: text;
        clientName: text;
        clientPhoneNo: text;
        serviceName: text;
        professionalId: text;
        professionalName: text;
        time: text;
        status: variant { Pending: null; Completed: null; Cancelled: null };
    }) query;

    getAppointments: () -> (vec record {
        appointmentId: text;
        created_at: nat64;
        serviceId: text;
        clientId: text;
        clientName: text;
        clientPhoneNo: text;
        serviceName: text;
        professionalId: text;
        professionalName: text;
        time: text;
        status: variant { Pending: null; Completed: null; Cancelled: null };
    }) query;

    getClient: (text) -> (opt record {
        id: text;
        principal: principal;
        appointments: vec text;
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) query;

    getClientByPrincipal: () -> (variant {
        Ok: record {
            id: text;
            principal: principal;
            appointments: vec text;
            name: text;
            email: text;
            address: text;
            phoneNo: text;
        };
        Err: variant {
            InvalidPayload: text;
            NotFound: text;
        };
    }) query;

    getClients: () -> (vec record {
        id: text;
        principal: principal;
        appointments: vec text;
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) query;

    getProfessional: (text) -> (opt record {
        id: text;
        principal: principal;
        appointments: vec text;
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) query;

    getProfessionalByPrincipal: () -> (variant {
        Ok: record {
            id: text;
            principal: principal;
            appointments: vec text;
            name: text;
            email: text;
            address: text;
            phoneNo: text;
        };
        Err: variant {
            InvalidPayload: text;
            NotFound: text;
        };
    }) query;

    getProfessionals: () -> (vec record {
        id: text;
        principal: principal;
        appointments: vec text;
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) query;

    getService: (text) -> (opt record {
        id: text;
        name: text;
        description: text;
        price: text;
    }) query;

    getServices: () -> (vec record {
        id: text;
        name: text;
        description: text;
        price: text;
    }) query;

    updateAppointment: (record {
        id: text;
        serviceName: opt text;
        time: opt text;
        status: opt variant { Pending: null; Completed: null; Cancelled: null };
    }) -> (variant {
        Ok: record {
            appointmentId: text;
            created_at: nat64;
            serviceId: text;
            clientId: text;
            clientName: text;
            clientPhoneNo: text;
            serviceName: text;
            professionalId: text;
            professionalName: text;
            time: text;
            status: variant { Pending: null; Completed: null; Cancelled: null };
        };
        Err: variant {
            NotFound: text;
        };
    });

    updateClientDetails: (text, record {
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) -> (variant {
        Ok: record {
            id: text;
            principal: principal;
            appointments: vec text;
            name: text;
            email: text;
            address: text;
            phoneNo: text;
        };
        Err: variant {
            NotFound: text;
        };
    });

    updateProfessionalDetails: (text, record {
        name: text;
        email: text;
        address: text;
        phoneNo: text;
    }) -> (variant {
        Ok: record {
            id: text;
            principal: principal;
            appointments: vec text;
            name: text;
            email: text;
            address: text;
            phoneNo: text;
        };
        Err: variant {
            NotFound: text;
        };
    });
}
